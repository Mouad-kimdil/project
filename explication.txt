# VolunteerHub - Documentation du Projet pour Débutants

## Vue d'ensemble
VolunteerHub est une plateforme web permettant aux utilisateurs de découvrir, s'inscrire et participer à des événements de bénévolat et des opportunités de service communautaire. Le projet utilise une architecture moderne avec une séparation claire entre le frontend (ce que l'utilisateur voit) et le backend (le serveur qui gère les données).

## Structure du Projet Expliquée
```
project/
├── frontend/          # Application React (interface utilisateur)
│   ├── public/        # Fichiers statiques accessibles publiquement
│   │   ├── index.html # Point d'entrée HTML de l'application
│   │   └── assets/    # Images, icônes et autres ressources
│   ├── src/           # Code source du frontend
│   │   ├── Components/  # Composants React réutilisables (morceaux d'interface)
│   │   │   ├── Navbar/    # Barre de navigation
│   │   │   ├── Profile/   # Page de profil utilisateur
│   │   │   ├── Events/    # Composants liés aux événements
│   │   │   └── ...
│   │   ├── api/         # Services pour communiquer avec l'API backend
│   │   │   ├── authApi.js  # Fonctions pour l'authentification
│   │   │   ├── eventApi.js # Fonctions pour gérer les événements
│   │   │   └── ...
│   │   ├── App.jsx      # Composant principal qui définit les routes
│   │   └── main.jsx     # Point d'entrée JavaScript de l'application
└── backend/           # API Node.js/Express (serveur)
    ├── config/        # Configuration (base de données, variables d'environnement)
    │   ├── db.js      # Configuration de la connexion à MongoDB
    │   └── .env       # Variables d'environnement (secrets, ports, etc.)
    ├── controllers/   # Contrôleurs pour gérer la logique métier
    │   ├── userController.js    # Gestion des utilisateurs
    │   ├── eventController.js   # Gestion des événements
    │   └── ...
    ├── middleware/    # Fonctions intermédiaires pour traiter les requêtes
    │   ├── auth.js    # Vérification de l'authentification
    │   └── ...
    ├── models/        # Modèles de données Mongoose (structure de la base de données)
    │   ├── User.js    # Modèle pour les utilisateurs
    │   ├── Event.js   # Modèle pour les événements
    │   └── ...
    ├── routes/        # Définition des routes API (endpoints)
    │   ├── userRoutes.js    # Routes pour les utilisateurs
    │   ├── eventRoutes.js   # Routes pour les événements
    │   └── ...
    └── server.js      # Point d'entrée du serveur
```

## Comment fonctionne une application web moderne

### 1. Architecture Client-Serveur
L'application est divisée en deux parties principales qui communiquent entre elles :
- **Frontend (Client)** : Ce que l'utilisateur voit dans son navigateur
- **Backend (Serveur)** : Traite les données et les requêtes, communique avec la base de données

### 2. Communication Client-Serveur
- Le frontend envoie des requêtes HTTP (GET, POST, PUT, DELETE) au backend
- Le backend traite ces requêtes et renvoie des réponses, généralement au format JSON
- Le frontend met à jour l'interface utilisateur en fonction de ces réponses

## Backend (API) Expliqué

Le backend est le "cerveau" de l'application. Il gère les données, l'authentification et la logique métier.

### Technologies utilisées :
- **Node.js** : Environnement d'exécution JavaScript côté serveur
- **Express** : Framework web pour créer des API facilement
- **MongoDB** : Base de données NoSQL qui stocke les données au format JSON
- **Mongoose** : Bibliothèque qui facilite l'interaction avec MongoDB
- **JWT (JSON Web Tokens)** : Méthode pour sécuriser l'authentification
- **bcrypt** : Outil pour hacher les mots de passe (les rendre sécurisés)

### Comment fonctionne le backend :

1. **server.js** : Point d'entrée qui configure le serveur Express
   - Définit les middlewares (fonctions qui traitent les requêtes)
   - Configure les routes (URLs que le client peut appeler)
   - Connecte à la base de données MongoDB

2. **Routes** : Définissent les endpoints API (URLs) que le frontend peut appeler
   - Exemple : `/api/users/login` pour se connecter
   - Chaque route est associée à une fonction dans un contrôleur

3. **Contrôleurs** : Contiennent la logique métier
   - Traitent les requêtes reçues des routes
   - Interagissent avec les modèles pour accéder à la base de données
   - Renvoient les réponses au client

4. **Modèles** : Définissent la structure des données dans MongoDB
   - Spécifient les champs, types et validations
   - Fournissent des méthodes pour interagir avec la base de données

5. **Middleware** : Fonctions qui s'exécutent entre la requête et la réponse
   - Exemple : middleware d'authentification qui vérifie si l'utilisateur est connecté

### Exemple de flux backend :
1. L'utilisateur essaie de se connecter via le frontend
2. Le frontend envoie une requête POST à `/api/users/login` avec email et mot de passe
3. La route dirige la requête vers la fonction `loginUser` du contrôleur utilisateur
4. Le contrôleur vérifie les identifiants dans la base de données
5. Si correct, génère un token JWT et le renvoie au frontend
6. Le frontend stocke ce token et l'utilise pour les requêtes futures

## Frontend (Interface Utilisateur) Expliqué

Le frontend est ce que l'utilisateur voit et avec quoi il interagit dans son navigateur.

### Technologies utilisées :
- **React** : Bibliothèque JavaScript pour construire des interfaces utilisateur
- **React Router** : Gère la navigation entre les différentes pages
- **SCSS** : Version améliorée de CSS pour styliser l'application
- **Fetch API** : Méthode native pour envoyer des requêtes HTTP au backend

### Comment fonctionne le frontend :

1. **main.jsx** : Point d'entrée qui initialise l'application React
   - Rend le composant App dans l'élément racine du HTML

2. **App.jsx** : Composant principal qui définit les routes
   - Utilise React Router pour afficher différents composants selon l'URL
   - Gère l'état global de l'application (comme l'authentification)

3. **Composants** : Morceaux réutilisables d'interface utilisateur
   - Chaque composant gère son propre état et rendu
   - Exemple : Navbar, Profile, EventDetail, etc.

4. **Services API** : Fonctions qui communiquent avec le backend
   - Encapsulent la logique des requêtes HTTP
   - Gèrent les erreurs et les réponses

### Exemple de flux frontend :
1. L'utilisateur clique sur "Se connecter"
2. React Router affiche le composant Login
3. L'utilisateur entre ses identifiants et soumet le formulaire
4. Le composant appelle `authApi.login()` avec les identifiants
5. Le service API envoie une requête au backend
6. Si la connexion réussit, le token est stocké et l'utilisateur est redirigé

## Flux de données complet (exemple d'inscription à un événement)

1. L'utilisateur navigue vers la page de détails d'un événement
2. Le composant EventDetail charge et appelle `eventApi.getEventById(id)`
3. Le service API envoie une requête GET à `/api/events/:id`
4. Le backend traite la requête via la route et le contrôleur appropriés
5. Le contrôleur récupère les données de l'événement depuis MongoDB
6. Les données sont renvoyées au frontend au format JSON
7. Le composant EventDetail affiche les informations de l'événement
8. L'utilisateur clique sur "S'inscrire à cet événement"
9. Le composant appelle `eventApi.registerForEvent(id)`
10. Le service API envoie une requête POST à `/api/events/:id/register` avec le token JWT
11. Le backend vérifie le token, inscrit l'utilisateur et met à jour la base de données
12. Le frontend met à jour l'interface pour montrer que l'utilisateur est inscrit

## Authentification expliquée

L'authentification utilise JSON Web Tokens (JWT), une méthode moderne et sécurisée :

1. **Connexion** :
   - L'utilisateur entre email et mot de passe
   - Le backend vérifie ces informations dans la base de données
   - Si correct, le backend génère un token JWT signé avec une clé secrète
   - Ce token contient l'ID de l'utilisateur et une date d'expiration

2. **Stockage du token** :
   - Le token est renvoyé au frontend
   - Le frontend le stocke dans le localStorage du navigateur
   - Le localStorage est une mémoire persistante du navigateur

3. **Utilisation du token** :
   - Pour chaque requête nécessitant une authentification, le frontend ajoute le token dans l'en-tête HTTP
   - Format : `Authorization: Bearer [token]`

4. **Vérification du token** :
   - Le middleware d'authentification du backend intercepte la requête
   - Il vérifie que le token est valide et non expiré
   - Si valide, il extrait l'ID utilisateur et l'ajoute à la requête
   - Si invalide, il renvoie une erreur 401 (Non autorisé)

5. **Déconnexion** :
   - Le frontend supprime simplement le token du localStorage

## Gestion des images

Les images (profil utilisateur, événements) sont gérées comme suit :

1. **Sélection d'image** :
   - L'utilisateur sélectionne une image depuis son appareil
   - Le frontend lit le fichier et le convertit en chaîne base64
   - Une chaîne base64 est une représentation textuelle des données binaires

2. **Stockage** :
   - Cette chaîne base64 est envoyée au backend
   - Le backend la stocke directement dans la base de données MongoDB
   - Avantage : simplicité d'implémentation
   - Inconvénient : peut alourdir la base de données

3. **Affichage** :
   - Le frontend récupère la chaîne base64 depuis le backend
   - L'image est affichée en utilisant cette chaîne comme source

## Comment démarrer le projet (instructions détaillées)

### Prérequis :
- Node.js installé (version 14 ou supérieure)
- MongoDB installé et en cours d'exécution
- npm ou yarn installé

### Démarrer le backend :
1. Ouvrir un terminal
2. Naviguer vers le dossier backend : `cd /Users/cryp70n-13/Desktop/project/backend`
3. Installer les dépendances : `npm install`
4. Vérifier que MongoDB est en cours d'exécution
5. Démarrer le serveur : `npm start`
6. Le serveur devrait démarrer sur le port 5001

### Démarrer le frontend :
1. Ouvrir un nouveau terminal
2. Naviguer vers le dossier frontend : `cd /Users/cryp70n-13/Desktop/project/frontend`
3. Installer les dépendances : `npm install`
4. Installer Vite (si nécessaire) : `npm install vite`
5. Démarrer l'application : `npm run dev`
6. Ouvrir le navigateur à l'adresse indiquée (généralement http://localhost:5173)

## Conseils pour les débutants

### Pour comprendre le code :
1. Commencez par explorer le frontend, en particulier les composants React
2. Examinez comment les composants utilisent les services API
3. Puis explorez le backend pour voir comment les requêtes sont traitées
4. Utilisez les commentaires dans le code comme guide

### Pour modifier le code :
1. Faites de petits changements à la fois et testez-les
2. Utilisez la console du navigateur (F12) pour déboguer le frontend
3. Utilisez les logs du terminal pour déboguer le backend
4. N'hésitez pas à consulter la documentation des technologies utilisées

### Ressources d'apprentissage :
- React : https://fr.reactjs.org/docs/getting-started.html
- Express : https://expressjs.com/fr/
- MongoDB : https://docs.mongodb.com/manual/
- JWT : https://jwt.io/introduction/

## Conclusion

VolunteerHub est une application web moderne qui utilise des technologies populaires et des pratiques de développement actuelles. En explorant ce code, vous apprendrez comment construire une application web complète avec authentification, gestion de données et interface utilisateur interactive.

N'hésitez pas à expérimenter avec le code et à l'adapter selon vos besoins. Bon développement !